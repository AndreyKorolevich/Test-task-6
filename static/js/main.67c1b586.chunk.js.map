{"version":3,"sources":["Pages/Main.js","Context/Alert/alertContext.js","Components/Form.js","Components/Name.js","Components/Loader.js","Pages/Employees.js","Components/Navbar.js","Components/Alert.js","Context/Alert/alertReducer.js","Context/types.js","Context/Alert/AlertState.js","App.js","serviceWorker.js","index.js"],"names":["Main","className","AlertContext","createContext","Form","addName","useState","firstName","setFirstName","lastName","setLastName","alert","useContext","onSubmit","event","preventDefault","trim","show","type","placeholder","value","onChange","e","target","Name","employees","deleteName","map","empl","key","id","onClick","Loader","role","Employees","loading","setLoading","setEmployees","useEffect","fetch","then","res","json","data","length","first_name","last_name","indexName","filter","Navbar","to","exact","Alert","hide","visible","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67c1b586.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Main = () => (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">Task#6</h1>\r\n            <p className=\"lead\">Version 1.0.0</p>\r\n        </div>\r\n    </div>\r\n)","import {createContext} from 'react';\r\n\r\nexport const AlertContext = createContext();","import React, {useState, useContext} from \"react\";\r\nimport {AlertContext} from \"../Context/Alert/alertContext\";\r\n\r\nexport const Form = ({addName}) => {\r\n    const [firstName, setFirstName] = useState('');\r\n    const [lastName, setLastName] = useState('');\r\n    const alert = useContext(AlertContext)\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n        if (firstName.trim() && lastName.trim()) {\r\n            alert.show('Name has added', 'success');\r\n            addName(firstName, lastName);\r\n            setFirstName('');\r\n            setLastName('')\r\n        } else {\r\n            alert.show('Text name')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-row\">\r\n                <div className='col form-group'>\r\n                    <input type=\"text\" className=\"form-control\" placeholder='Text First name'\r\n                           value={firstName} onChange={e => setFirstName(e.target.value)}/>\r\n                </div>\r\n                <div className='col form-group'>\r\n                    <input type=\"text\" className=\"form-control\" placeholder='Text Last name'\r\n                           value={lastName} onChange={e => setLastName(e.target.value)}/>\r\n                </div>\r\n                <div className=\"col-auto\">\r\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Submit</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Name = ({employees, deleteName}) => {\r\n    return(\r\n        <ul className='list-group'>\r\n            {employees.map(empl => (\r\n                <li className='list-group-item name' key={empl.id}>\r\n                    {empl['first_name']} {empl['last_name']}\r\n                    <button onClick={() => {\r\n                        deleteName(empl.id)\r\n                    }} type=\"button\" className=\"btn btn-outline-danger btn-sm\">&times;</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className='text-center'>\r\n            <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {Fragment, useEffect, useState} from \"react\";\r\nimport {Form} from \"../Components/Form\";\r\nimport {Name} from \"../Components/Name\";\r\nimport {Loader} from \"../Components/Loader\";\r\n\r\nexport const Employees = () => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [employees, setEmployees] = useState([]);\r\n\r\n    useEffect(() => {\r\n      fetch('https://reqres.in/api/users?per_page=12')\r\n          .then(res => res.json())\r\n          .then(\r\n              (res) => {\r\n                  setLoading(false)\r\n                  setEmployees(res.data)\r\n              }\r\n          )\r\n    }, [])\r\n\r\n    const addName = (firstName, lastName) => {\r\n        setEmployees(\r\n            [...employees,{\r\n                id: employees.length + 1,\r\n                first_name: firstName,\r\n                last_name: lastName,\r\n            }]\r\n        )\r\n    }\r\n\r\n    const deleteName = (indexName) => {\r\n        setEmployees(\r\n            employees.filter(empl => empl.id !== indexName)\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Form addName={addName}/>\r\n            <hr/>\r\n            {loading\r\n                ? <Loader />\r\n                : <Name employees={employees} deleteName={deleteName}/>\r\n            }\r\n\r\n        </Fragment>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const Navbar = () => (\r\n    <nav className='navbar navbar-dark navbar-expand-lg bg-primary'>\r\n        <div className=\"navbar-brand\">\r\n            Task#6\r\n        </div>\r\n        <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to='/' exact>Main </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" to='/employees'>Employees</NavLink>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n)","import React, {useContext} from \"react\";\r\nimport {AlertContext} from \"../Context/Alert/alertContext\";\r\n\r\nexport const Alert = () => {\r\n    const {alert, hide} = useContext(AlertContext)\r\n    if(!alert.visible) return  null\r\n\r\n    return (\r\n        <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n            <strong>Warn!</strong>\r\n            {alert.text}\r\n            <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}","import {HIDE_ALERT, SHOW_ALERT} from \"../types\";\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n    [HIDE_ALERT]: state => ({...state, visible: false}),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n    return handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\n","import React, {useReducer} from \"react\";\r\nimport {AlertContext} from \"./alertContext\";\r\nimport {alertReducer} from \"./alertReducer\";\r\nimport {HIDE_ALERT, SHOW_ALERT} from \"../types\";\r\n\r\nexport const AlertState = ({children}) => {\r\n    const [state, dispatch] = useReducer(alertReducer, {visible: false})\r\n    const show = (text, type = 'warning') => {\r\n        dispatch({\r\n         type: SHOW_ALERT,\r\n         payload: {text, type}\r\n        })\r\n    }\r\n\r\n    const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n    return(\r\n        <AlertContext.Provider value={{show, hide, alert: state}}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter, HashRouter, Route, Switch} from 'react-router-dom';\nimport './App.css';\nimport {Main} from \"./Pages/Main\";\nimport {Employees} from \"./Pages/Employees\";\nimport {Navbar} from \"./Components/Navbar\";\nimport {Alert} from \"./Components/Alert\";\nimport {AlertState} from \"./Context/Alert/AlertState\";\n\nfunction App() {\n    return (\n            <AlertState>\n                <HashRouter>\n                    <Navbar/>\n                    <div className=\"container pt-4\">\n                        <Alert/>\n                        <Switch>\n                            <Route path={'/'} exact component={Main}/>\n                            <Route path={'/employees'} exact component={Employees}/>\n                        </Switch>\n                    </div>\n                </HashRouter>\n            </AlertState>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}